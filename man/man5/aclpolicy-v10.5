.TH ACLPOLICY 5 "August 31, 2011" "Rundeck User Manuals" "Version 1.4"
.SH Overview
.PP
This document describes the YAML format for ACL Policy definition
files.
.PP
Multiple aclpolicy files can be stored in the same directory,
helping the management of each set of rules.
This reduces the complexity of each file.
The default path is
.IP \[bu] 2
RPM install: \f[B]/etc/rundeck\f[]
.IP \[bu] 2
Launcher install: \f[B]$RDECK_BASE/etc\f[]
.PP
Policy files are parsed using YAML and while the structure is
rigid, additional information can be added and safely ignored.
So creating arbitrary elements for documentation or organizational
purposes is gracefully parsed.
.PD 0
.P
.PD
The resulting file must
be a valid yaml file.
.PP
For more information about the exact resources and actions you need
to authorize for the Rundeck application, see the
Rundeck User Manual - Authorization (manual/administration.html#authorization).
.SS Authorizing a certain action on a resource
.PP
The aclpolicy describes actions that are allowed or denied on
certain resources.
.PP
The method for determining whether a user has access to perform
such an action happens essentially in this way:
.IP "1." 3
Look for policies matching the username or rolename for the user
.IP "2." 3
Look for a context matching the environment of the given resource
.RS 4
.IP \[bu] 2
either a specific project by name
.IP \[bu] 2
or the application level
.RE
.IP "3." 3
Look for a Type rule for the type of resource
.RS 4
.IP \[bu] 2
either a specific resource by its named type
.IP \[bu] 2
or the generic \[lq]resource\[rq]
.RE
.IP "4." 3
Iterate through the rules for the type
.RS 4
.IP \[bu] 2
if a rule matches, and allows the action, mark it and continue.
.IP \[bu] 2
if a rule matches and denies the action, return DENIED, and stop
.RE
.IP "5." 3
If it was DENIED, return DENIED.
If it was marked, return ALLOWED.
Otherwise if no rules matched, return REJECTED.
.PP
Thus to allow an action, there has to be a matching rule that
allows it, and no matching rule that denies it.
.SS Changes
.PP
The YAML format has changed since version 1.2 to address several
issues:
.IP "1." 3
Acccess control on resources other than Jobs can now be declared
.IP "2." 3
Project level access control is now supported
.IP "3." 3
\[lq]Deny\[rq] rules can now be declared
.IP "4." 3
Application level access control is also supported, replacing the
Role mapping
.PP
The Rundeck server no longer uses role-mapping and instead defers
to the aclpolicy for all authorizations.
.SS Upgrading
.PP
Note: The XML format from Rundeck 1.3 and earlier is no longer
supported.
As well, the YAML format from 1.2 is now only partially supported.
.PP
If you are upgrading from Rundeck 1.3 or earlier, you will have to
modify your *.aclpolicy files.
.PP
If you have XML formatted files, you will need to remove and
replace them with a YAML document in the format described below.
A full, admin-level ACL is described at the end of this document.
.PP
If you have YAML formatted files, you will also need to upgrade
them slightly.
.SS The aclpolicy markup by example
.PP
An example policy document.
.PP
\f[CR]
      description:\ Yaml\ Policy\ 1
      context:\ #\ declares\ the\ context\ of\ the\ ACL
      \ \ project:\ \[aq].*\[aq]\ #\ applies\ to\ projects\ matching\ a\ regex.
      for:
      \ \ resource:
      \ \ \ \ \ -\ equals:
      \ \ \ \ \ \ \ \ kind:\ job
      \ \ \ \ \ \ \ allow:\ \[aq]*\[aq]
      \ \ job:
      \ \ \ \ \ -\ allow:\ \[aq]*\[aq]
      \ \ \ \ \ -\ match:
      \ \ \ \ \ \ \ \ \ group:\ \[aq]group1/.*\[aq]
      \ \ \ \ \ \ \ deny:\ \[aq]*\[aq]
      
      #\ note,\ the\ 1.2\ format\ "rules"\ section\ can\ still\ be\ used\ if\ no
      #\ "for:\ job:\ "\ section\ is\ used
      rules:
      \ \ ^$:
      \ \ \ \ actions:\ \[aq]foobar\[aq]
      
      \ \ /listAction/.*:
      \ \ \ \ actions:\ [action_list_1,action_list_2]
      
      by:
      \ \ \ \ username:\ \[aq]yml_usr_1\[aq]
      \ \ \ \ group:\ [\[aq]yml_group_1\[aq],\[aq]group2\[aq]]
\f[]
.PP
An \&.aclpolicy supports multiple policy definitions in the form of
YAML documents usign the \f[B]---\f[] separator.
There are four elements that make a policy definition:
\f[B]decription\f[], \f[B]context\f[], \f[B]for\f[], \f[B]by\f[].
.PP
It's recommended that this description be short and descriptive as
it appears in the log output.
.SS \f[B]context\f[]
.PP
The \f[B]context\f[] section declares the scope of the ensuing
policy description.
.PP
The \f[B]context\f[] can contain one of two things:
.IP "1." 3
\f[B]project\f[]
.IP "2." 3
\f[B]application\f[]
.PP
Declaring a \f[B]project:\f[] declares the name of the project(s)
for which the policy applies.
Its value is a String, and can be a regular expression, for which
the project name must match to apply.
.PP
If you declare an \f[B]application\f[] section, its only supported
value is \f[B]rundeck\f[], as: context: application: `rundeck'
.PP
This declares that the policy document describes access control at
the application level, rather than for at a project level.
You can then declare access control on actions such as creating
Projects.
.PP
Note that to provide a full \[lq]admin\[rq] level access control
for a user or group, then two policies must be defined, for
application level as well as for project level.
.PP
\f[B]NOTE\f[] if you are upgrading a yaml 1.2 format document, you
will need to add a \f[B]context\f[] section.
.SS \f[B]for\f[]
.PP
The \f[B]for\f[] section declares a set of resource types, each
containing a sequence of matching rules which allow or deny certain
actions.
.PP
Resource types declare the type of a specific resource for the
match, and the generic \[lq]resource\[rq] is used to declare rules
for all resources of a certain type.
.PP
Inside \f[B]for\f[] is an entry for any of these resource types:
.IP \[bu] 2
\f[B]job\f[] - a Rundeck Job
.IP \[bu] 2
\f[B]node\f[] - a Node resource
.IP \[bu] 2
\f[B]adhoc\f[] - an Ad-hoc execution
.IP \[bu] 2
\f[B]project\f[] - a Project
.IP \[bu] 2
\f[B]resource\f[] - indicates rules for all resources of a certain
kind
.PP
Within each type section is a sequence of rules.
Recall that in YAML, a sequence is defined using multiple
\f[B]-\f[] indicators, or within \f[B][\f[] and \f[B]]\f[] and
separated by commas.
.PP
Yaml sequences:
.PP
\f[CR]
      -\ a
      -\ b
\f[]
.PP
also:
.PP
\f[CR]
      [\ a,\ b\ ]
\f[]
.SS Type rules
.PP
Type rules are in the form:
.PP
\f[CR]
      matching*:
      \ property:\ value
      allow:\ actions
      deny:\ actions
\f[]
.PP
Each rule has one or more of these Action entries:
.IP \[bu] 2
\f[B]allow\f[] - (List or String) - the actions allowed
.IP \[bu] 2
\f[B]deny\f[] - (List or String) - the actions denied
.PP
It also has one or more of these \[lq]Matching\[rq] entries:
.IP \[bu] 2
\f[B]match\f[] - (List or String) - regular expression matches
.IP \[bu] 2
\f[B]equals\f[] - (String) - equality matches
.IP \[bu] 2
\f[B]contains\f[] - (List or String) - set membership matches
.PP
Each Matching entry is composed of \f[B]property:\ value\f[], which
declare what property of the resource to test, and what value or
values to apply the matching rule to.
.PP
For example, to declare a rule for a resource with a \[lq]name\[rq]
property of \[lq]bob\[rq] exactly, use \f[B]equals\f[]:
.PP
\f[CR]
      equals:
      \ \ name:\ bob
      allow:\ [action1,\ action2]
      deny:\ action3
\f[]
.PP
For regular expression matching, use \f[B]match\f[]:
.PP
\f[CR]
      match:
      \ \ name:\ \[aq]bob|sam\[aq]
\f[]
.PP
For set membership matches, such as matching a Node that must have
three different tags, you can use \f[B]contains\f[]
.PP
\f[CR]
      contains:
      \ \ tags:\ [a,b,c]
\f[]
.PP
The \f[B]match\f[] and \f[B]contains\f[] allow a list of property
values, and all of them must match the resource's property for the
rule to match.
This allows the basic boolean AND logic.
For OR logic, you can simply declare another rule in the sequence
since all rules are checked (except in the case of an explicit
deny).
.SS \f[B]by\f[]
.PP
Within \f[B]by\f[] are \f[B]username\f[] and \f[B]group\f[] entries
that declare who the policy applies to.
.PP
Each entry can contain a single string, or a sequence of strings to
define multiple entries.
.PP
A single match will result in further evaluation of the policy.
.PP
\f[B]username\f[] elements are evaluated first as they are
typically more restrictive.
.PD 0
.P
.PD
\f[B]group\f[] elements
are evaluated second.
Ordering is not important within this element.
.PP
Examples:
.PP
\f[CR]
      by:
      \ \ username:\ \[aq]bob\[aq]
      
      by:
      \ \ group:\ [test,qa,prod]
      
      by:
      \ \ username:\ 
      \ \ \ \ -\ simon
      \ \ \ \ -\ frank
\f[]
.SS legacy job matching
.PP
YAML aclpolicy files created before 1.4 would have the
\f[B]rules\f[] sections.
These were only designed to match Jobs, and so for backwards
compatibilty these rules sections can still be used for matching
only jobs.
.PP
The changes for the newer version affect the old \f[B]rules\f[]
section in these ways:
.IP \[bu] 2
only actual existing Jobs are matched to the rules, meaning the
`adhoc' and `ui' pseudo-groups no longer exist.
You must translate these actions to the new format.
.IP \[bu] 2
Action names have changed from \[lq]workflow_X\[rq] to simply
\[lq]X\[rq], so you will have to modify the actions.
.PP
See
Rundeck User Manual - Authorization (manual/administration.html#authorization)
for more information.
.SS \f[B]rules\f[] Element
.PP
The \f[B]rules\f[] element contains a map of resource paths to
\f[B]actions\f[].
The key in each rule, for example:
.PP
\f[CR]
      /path:
      \ \ \ actions:\ \[aq]an_action\[aq]
\f[]
.PP
\f[B]/path\f[] is evaluated against the resource being evaluated.
See below for a complete list of paths that can have ACLs applied.
The path is evaluated as a java regex expression.
If a match is successful, then a final check against
\f[B]actions\f[] element is performed.
.SS \f[B]actions\f[] element
.PP
The actions element can be either a single value, or a list of
values.
A single value takes the form:
.PP
\f[CR]
      actions:\ \[aq]an_action\[aq]
\f[]
.PP
And a list takes the form:
.PP
\f[CR]
      actions:\ [\[aq]an_action1\[aq],\[aq]an_action2\[aq]]
\f[]
.PP
Note that the single tick marks are optional according to the yaml
specification.
.PP
Possible values are limitless so it requires an understanding of
the job definition you're trying to run.
The best way to understand what the actions are is to look at the
rundeck-audit.log.
This will show all the options as they're being evaluated.
.SS Example Admin policy
.PP
This document grants full permissions to an `admin' role:
.PP
\f[CR]
      description:\ Admin\ project\ level\ access\ control.\ Applies\ to\ resources\ within\ a\ specific\ project.
      context:
      \ \ project:\ \[aq].*\[aq]\ #\ all\ projects
      for:
      \ \ resource:
      \ \ \ \ -\ equals:
      \ \ \ \ \ \ \ \ kind:\ job
      \ \ \ \ \ \ allow:\ [create]\ #\ allow\ create\ jobs
      \ \ \ \ -\ equals:
      \ \ \ \ \ \ \ \ kind:\ node
      \ \ \ \ \ \ allow:\ [read,create,update,refresh]\ #\ allow\ refresh\ node\ sources
      \ \ \ \ -\ equals:
      \ \ \ \ \ \ \ \ kind:\ event
      \ \ \ \ \ \ allow:\ [read,create]\ #\ allow\ read/create\ events
      \ \ adhoc:
      \ \ \ \ -\ allow:\ [run,kill]\ #\ allow\ running/killing\ adhoc\ jobs
      \ \ job:\ 
      \ \ \ \ -\ allow:\ [create,read,update,delete,run,kill]\ #\ allow\ create/read/write/delete/run/kill\ of\ all\ jobs
      \ \ node:
      \ \ \ \ -\ allow:\ [read,run]\ #\ allow\ read/run\ for\ nodes
      by:
      \ \ group:\ admin
      
      ---
      
      description:\ Admin\ Application\ level\ access\ control,\ applies\ to\ creating/deleting\ projects,\ admin\ of\ user\ profiles,\ viewing\ projects\ and\ reading\ system\ information.
      context:
      \ \ application:\ \[aq]rundeck\[aq]
      for:
      \ \ resource:
      \ \ \ \ -\ equals:
      \ \ \ \ \ \ \ \ kind:\ project
      \ \ \ \ \ \ allow:\ [create]\ #\ allow\ create\ of\ projects
      \ \ \ \ -\ equals:
      \ \ \ \ \ \ \ \ kind:\ system
      \ \ \ \ \ \ allow:\ [read]\ #\ allow\ read\ of\ system\ info
      \ \ \ \ -\ equals:
      \ \ \ \ \ \ \ \ kind:\ user
      \ \ \ \ \ \ allow:\ [admin]\ #\ allow\ modify\ user\ profiles
      \ \ project:
      \ \ \ \ -\ match:
      \ \ \ \ \ \ \ \ name:\ \[aq].*\[aq]
      \ \ \ \ \ \ allow:\ [read,admin]\ #\ allow\ view/admin\ of\ all\ projects
      by:
      \ \ group:\ admin
\f[]
.PP
The Rundeck source code and all documentation may be downloaded
from <https://github.com/dtolabs/rundeck/>.
.SH AUTHORS
Noah Campbell; Greg Schueler.

